#encoding=UTF-8
#********************************************************************
# System Properties
#********************************************************************
# Location of your Mule installation.
wrapper.java.additional.1=-Dmule.home="%MULE_HOME%"
wrapper.java.additional.1.stripquotes=TRUE
wrapper.java.additional.2=-Dmule.base="%MULE_BASE%"
wrapper.java.additional.2.stripquotes=TRUE

# Sets IPv4 addresses in order to avoid multicasting issues
wrapper.java.additional.3=-Djava.net.preferIPv4Stack=TRUE

# Needed to avoid a memory leak on mvel (see MULE-7650)
wrapper.java.additional.4=-Dmvel2.disable.jit=TRUE

# Limit HTTP module send and receive buffers size to 1MB by default to avoid running out of Direct Memory.  To optimize for
# performance this system property should be removed and direct memory increased as required.
wrapper.java.additional.5=-Dorg.glassfish.grizzly.nio.transport.TCPNIOTransport.max-receive-buffer-size=1048576
wrapper.java.additional.6=-Dorg.glassfish.grizzly.nio.transport.TCPNIOTransport.max-send-buffer-size=1048576

# Limit the Metaspace Size to protect system memory from unwanted usage
# Increase this value if you get "Java.lang.OutOfMemoryError: Metaspace" error
wrapper.java.additional.7=-XX:MaxMetaspaceSize=256m
wrapper.java.additional.8=-XX:MetaspaceSize=128m


# *** IMPORTANT ***
# If you enable any of the options below, you _must_ change the <n> to be a
# consecutive number (based on the number of additional properties) otherwise
# Java will not parse this properties file correctly!
# (see http://wrapper.tanukisoftware.org/doc/english/prop-java-additional-n.html)
# *** IMPORTANT ***

#############################
# High Availability settings
#############################
#wrapper.java.additional.<n>=-Dmule.clusterId=DEFAULT
#wrapper.java.additional.<n>=-Dmule.clusterNodeId=1
#wrapper.java.additional.<n>=-Dmule.clusterSize=2
#############################


<% idx = 9 %>
<% if ENV['MULE_LOGGING_VERBOSE_GB'] == "true" %>
# Garbage Collection
wrapper.java.additional.<%= idx += 1; idx %>=-verbose:gc
wrapper.java.additional.<%= idx += 1; idx %>=-XX:+PrintGCDateStamps
wrapper.java.additional.<%= idx += 1; idx %>=-XX:+PrintGCApplicationStoppedTime
wrapper.java.additional.<%= idx += 1; idx %>=-XX:+PrintGCDetails
wrapper.java.additional.<%= idx += 1; idx %>=-XX:+PrintTenuringDistribution
wrapper.java.additional.<%= idx += 1; idx %>=-XX:+HeapDumpOnOutOfMemoryError
wrapper.java.additional.<%= idx += 1; idx %>=-Xloggc:%MULE_HOME%/logs/%MULE_APP%-gc.log
#this is not the right place for this
wrapper.java.additional.<%= idx += 1; idx %>=-XX:+AlwaysPreTouch
wrapper.java.additional.<%= idx += 1; idx %>=-XX:NewRatio=1
wrapper.java.additional.<%= idx += 1; idx %>=-XX:MaxTenuringThreshold=8
<% end %>

#If you need to do combinations of specific settings for memory and GC see the MULE_WRAPPER_CUSTOM_ARG_ options further down
<% if ENV['MULE_TUNING_GC'] == "G1" %>
wrapper.java.additional.<%= idx += 1; idx %>=-XX:+UseG1GC
<% elsif ENV['MULE_TUNING_GC'] == "CMS" %>
wrapper.java.additional.<%= idx += 1; idx %>=-XX:+UseConcMarkSweepGC
wrapper.java.additional.<%= idx += 1; idx %>=-XX:+CMSIncrementalMode
wrapper.java.additional.<%= idx += 1; idx %>=-XX:SurvivorRatio=16
wrapper.java.additional.<%= idx += 1; idx %>=-XX:CMSInitiatingOccupancyFraction=65
wrapper.java.additional.<%= idx += 1; idx %>=-XX:UseCMSInitiatingOccupancyOnly
<% end %>

# Avoid Quartz update check. See https://jira.terracotta.org/jira/browse/QTZ-29
wrapper.java.additional.<%= idx += 1; idx %>=-Dorg.quartz.scheduler.skipUpdateCheck=true

# Metadata Cache
wrapper.java.additional.<%= idx += 1; idx %>=-Dmule.metadata.cache.entryTtl.minutes=10
wrapper.java.additional.<%= idx += 1; idx %>=-Dmule.metadata.cache.expirationInterval.millis=5000

# Locale Compatibility Mode
wrapper.java.additional.<%= idx += 1; idx %>=-Djava.locale.providers=COMPAT,CLDR,SPI

# Disable JMX for log4j
wrapper.java.additional.<%= idx += 1; idx %>=-Dlog4j2.disable.jmx=true



<% # Enable API PLatform integration if configured
if File.exist?("#{ENV['MULE_HOME']}/conf/apigw/api-gateway.properties")
    gw = Hash[ File.read("#{ENV['MULE_HOME']}/conf/apigw/api-gateway.properties").split("\n").map{|i|i.split('=')} ] 
%>
#######################################################################################
# Anypoint Platform Settings
#######################################################################################
# The following option is mandatory and identifies your Mule instance against
# the Anypoint Platform.
#
wrapper.java.additional.<%= idx += 1; idx %>=-Danypoint.platform.client_id=<%= gw['gw_client_id'] %>
wrapper.java.additional.<%= idx += 1; idx %>=-Danypoint.platform.client_secret=<%= gw['gw_client_secret'] %>
#
# For the client to use a proxy when communicating back to the Anypoint Platform, you
# need to configure the following properties
#
# wrapper.java.additional.<n>=-Danypoint.platform.proxy_host=XXXXXXXX
# wrapper.java.additional.<n>=-Danypoint.platform.proxy_port=XXXXXXXX
# wrapper.java.additional.<n>=-Danypoint.platform.proxy_username=XXXXXXXX
# wrapper.java.additional.<n>=-Danypoint.platform.proxy_password=XXXXXXXX
#
# Default Analytics URL, you can provide your own modifying this property
wrapper.java.additional.<%= idx += 1; idx %>=-Danypoint.platform.analytics_base_uri=https://analytics-ingest.anypoint.mulesoft.com
#
# Analytics is enabled by default, you can disable it by changing this property
# wrapper.java.additional.<n>=-Danypoint.platform.analytics_enabled=true
#
# If analytics is enabled, the client IP is included by default in the event, you can disable it by changing this property
# wrapper.java.additional.<n>=-Danypoint.platform.analytics_include_client_ip=true
#
# On-Prem Configuration
#
# wrapper.java.additional.<n>=-Danypoint.platform.on_prem=false
# wrapper.java.additional.<n>=-Danypoint.platform.platform_base_uri=http://your.on-prem.plaform.uri/apiplatform
# wrapper.java.additional.<n>=-Danypoint.platform.coreservice_base_uri=http://your.on-prem.core-service.uri/accounts
# wrapper.java.additional.<n>=-Danypoint.platform.contracts_base_uri=https://your.on-prem.contracts-service.uri
#######################################################################################
<% end %>

<% if ENV['MULE_LOGGING_VERBOSE_EXCEPTIONS'] == "true" %>
# Stack traces are truncated in the logs by default
wrapper.java.additional.<%= idx += 1; idx %>=-Dmule.verbose.exceptions=true
<% end %>

# No need to expose JMX since agent is monitoring
# <% if ENV['MULE_MANAGEMENT_ENABLE_JMX'] == "true" %>
# # Enable JMX monitoring
# wrapper.java.additional.<%= idx += 1; idx %>=-Dcom.sun.management.jmxremote
# wrapper.java.additional.<%= idx += 1; idx %>=-Dcom.sun.management.jmxremote.port=<%= ENV['MULE_MANAGEMENT_JMX_PORT'] %>
# wrapper.java.additional.<%= idx += 1; idx %>=-Dcom.sun.management.jmxremote.authenticate=false
# wrapper.java.additional.<%= idx += 1; idx %>=-Dcom.sun.management.jmxremote.ssl=false
# wrapper.java.additional.<%= idx += 1; idx %>=-Dcom.sun.management.jmxremote.local.only=false
# wrapper.java.additional.<%= idx += 1; idx %>=-Dcom.sun.management.jmxremote.rmi.port=<%= ENV['MULE_MANAGEMENT_JMX_PORT'] %>
# wrapper.java.additional.<%= idx += 1; idx %>=-Djava.rmi.server.hostname=
# <% end %>


<% if ENV['MULE_MANAGEMENT_ENABLE_JMXTRANS_AGENT'] == "true" %>
# Add jmxtrans-agent
wrapper.java.additional.<%= idx += 1; idx %>=-javaagent:<%=ENV['MULE_HOME'] %>/lib/user/jmxtrans-agent-1.2.5.jar=<%=ENV['MULE_HOME'] %>/conf/jmxtrans-agent.xml
<% else %>
# Add jvm agent
wrapper.java.additional.<%= idx += 1; idx %>=-javaagent:<%=ENV['MULE_HOME'] %>/lib/user/jolokia-jvm-1.3.3-agent.jar=config=<%=ENV['MULE_HOME'] %>/conf/jolokia.properties
<% end %>
# ##########################
# MAKE SURE CUSTOM SSL IS IN USE BEFORE UNCOMMENT THIS SECTION
#ssl config
# wrapper.java.additional.<%= idx += 1; idx %>=-Djavax.net.ssl.keyStore=<%= ENV['MULE_SSL_KEYSTORE_PATH'] %>
# wrapper.java.additional.<%= idx += 1; idx %>=-Djavax.net.ssl.trustStore=<%= ENV['MULE_SSL_TRUSTSTORE_PATH'] %>
# wrapper.java.additional.<%= idx += 1; idx %>=-Djavax.net.ssl.keyStorePassword=<%= ENV['KEYSTORE_KEY'] %>
# wrapper.java.additional.<%= idx += 1; idx %>=-Djavax.net.ssl.trustStorePassword=<%= ENV['KEYSTORE_KEY'] %>
#############################

# Debug remotely, the application will wait for the external debugger to connect.
#wrapper.java.additional.<n>=-Xdebug
#wrapper.java.additional.<n>=-Xnoagent
#wrapper.java.additional.<n>=-Djava.compiler=NONE
#wrapper.java.additional.<n>=-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005

# Specify an HTTP proxy if you are behind a firewall.
#wrapper.java.additional.<n>=-Dhttp.proxyHost=YOUR_HOST
#wrapper.java.additional.<n>=-Dhttp.proxyPort=YOUR_PORT
#wrapper.java.additional.<n>=-Dhttp.proxyUsername=YOUR_USER_NAME
#wrapper.java.additional.<n>=-Dhttp.proxyPassword=YOUR_PASSWORD

# Identification of your Mule server
#wrapper.java.additional.<n>=-Dmule.serverId=YOUR_MULE_SERVER
#wrapper.java.additional.<n>=-Dmule.clusterId=YOUR_MULE_CLUSTER
#wrapper.java.additional.<n>=-Dmule.domainId=YOUR_MULE_DOMAIN

# Mule's working directory for SEDA queue persistence, transactions, etc.
#wrapper.java.additional.<n>=-Dmule.workingDirectory=./.mule

# Enables fips140-2 mode, disabling any cryptographic modes of operation not approved in the standard.
# Note that full compliance also requires a certified JCE provider installed
#wrapper.java.additional.<n>=-Dmule.security.model=fips140-2

# Miscellaneous settings
#wrapper.java.additional.<n>=-Dmule.encoding=UTF-8
#wrapper.java.additional.<n>=-Dmule.endpoints.synchronous=false
#wrapper.java.additional.<n>=-Dmule.remoteSync=false
#wrapper.java.additional.<n>=-Dmule.timeout.synchronous=10000
#wrapper.java.additional.<n>=-Dmule.timeout.transaction=30000
#wrapper.java.additional.<n>=-Dmule.systemModelType=seda
#wrapper.java.additional.<n>=-Dmule.clientMode=false

# MMC Agent settings
wrapper.java.additional.<%= idx += 1; idx %>=-Dmule.agent.enabled=false
#wrapper.java.additional.<n>=-Dmule.mmc.bind.port=7777

# Debug options
#wrapper.java.additional.<n>=-Dmule.disable.threadsafemessages=false
#wrapper.java.additional.<n>=-Dmule.message.cacheBytes=true
#wrapper.java.additional.<n>=-Dmule.message.cacheOriginal=true
#wrapper.java.additional.<n>=-Dmule.streaming.enable=true
#wrapper.java.additional.<n>=-Dmule.message.assertAccess=true
#wrapper.java.additional.<n>=-Dmule.transform.autoWrap=true

# Environment Variables

#********************************************************************
# Wrapper Properties
#********************************************************************
# Uncomment this line in the case of startup failure.
#wrapper.debug=true

# Java Application
wrapper.java.command=java

# Java Main class - 3.X
#wrapper.java.mainclass=org.mule.module.reboot.MuleContainerBootstrap

# Java Main class
wrapper.java.mainclass=org.mule.runtime.module.reboot.MuleContainerBootstrap


# Main class for legacy mode.  Comment about the mainclass property above
# and uncomment the one below.  You will also need to switch out the wrapper
# license properties. See the 'wrapper.license' properties near the end of this
# file.
#wrapper.java.mainclass=org.mule.module.boot.MuleBootstrap

# Java Classpath
wrapper.java.classpath.1=%MULE_LIB%
wrapper.java.classpath.2=%MULE_BASE%/conf
wrapper.java.classpath.3=%MULE_HOME%/lib/boot/*.jar
#wrapper.java.classpath.4=%MULE_BASE%/data-mapper  #mule3.9

# Java Native Library Path (location of .DLL or .so files)
wrapper.java.library.path.1=%MULE_HOME%/lib/boot

# Increase the default startup timeout so that the JVM has enough
# time to download the required jars on a slow connection
wrapper.startup.timeout=600


# Communication backend type
wrapper.backend.type=PIPE

# Number of seconds to allow between the Wrapper pinging the JVM and the response from the JVM
wrapper.ping.timeout=30

# Action to be executed after a ping timeout.
wrapper.ping.timeout.action=DUMP,RESTART

# Initial Java Heap Size (in MB)
wrapper.java.initmemory=<%= ENV['MULE_MEMORY_MIN_HEAP'] %>

# Maximum Java Heap Size (in MB)
wrapper.java.maxmemory=<%= ENV['MULE_MEMORY_MAX_HEAP'] %>

# These are additional properties that can be added per app in the application properties files.
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_1'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_1'] %>
<% end %>
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_2'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_2'] %>
<% end %>
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_3'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_3'] %>
<% end %>
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_4'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_4'] %>
<% end %>
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_5'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_5'] %>
<% end %>
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_6'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_6'] %>
<% end %>
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_7'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_7'] %>
<% end %>
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_8'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_8'] %>
<% end %>
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_9'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_9'] %>
<% end %>
<% if ENV['MULE_WRAPPER_CUSTOM_ARG_10'] %>
wrapper.java.additional.<%= idx += 1; idx %>=<%= ENV['MULE_WRAPPER_CUSTOM_ARG_10'] %>
<% end %>

# Ignore gaps in additional properties sequence
wrapper.ignore_sequence_gaps=TRUE

# Output the Java PID file
wrapper.java.pidfile=<%=ENV['MULE_HOME']%>/.mule.jvm.pid

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Format of output for the console.  (See docs for formats)
wrapper.console.format=M

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# Flush the console logs
wrapper.console.flush=TRUE

# Log file to use for wrapper output logging.
wrapper.logfile=%MULE_BASE%/logs/%MULE_APP%.log

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=M

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=NONE

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=10m

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=10

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

# Avoid warnings on reflective access
# TODO: investigate a general solution for classloading modular dependencies (MULE-18391)
set.JDK_JAVA_OPTIONS=--add-opens java.base/sun.net.www.protocol.file=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED  --add-opens java.desktop/java.beans=ALL-UNNAMED 


#********************************************************************
# Wrapper Windows Properties
#********************************************************************
# Title to use when running as a console
wrapper.console.title=%MULE_APP_LONG%

#********************************************************************
# Wrapper Windows NT/2000/XP Service Properties
#********************************************************************
# WARNING - Do not modify any of these properties when an application
#  using this configuration file has been installed as a service.
#  Please uninstall the service before modifying this section.  The
#  service can then be reinstalled.

# Name of the service
wrapper.ntservice.name=%MULE_APP%

# Display name of the service
wrapper.ntservice.displayname=%MULE_APP_LONG%

# Description of the service
wrapper.ntservice.description=%MULE_APP_LONG%

# Service dependencies.  Add dependencies as needed starting from 1
wrapper.ntservice.dependency.1=

# Mode in which the service is installed.  AUTO_START or DEMAND_START
wrapper.ntservice.starttype=AUTO_START

# Allow the service to interact with the desktop.
wrapper.ntservice.interactive=false

# Sets a pidfile to prevent multiple copies of the application to run simultaneously on Windows. Uncomment the following properties if you wish to set this behaviour.
# This is the default behaviour for UNIX based systems, so no need to uncomment the properties if this is the case.
# You should be aware that, when running in Windows systems, if mule is shutdown ungracefully the pidfile may remain in place preventing future instances from running.
# If that is the case, you sould manually remove the pidfile.
#wrapper.pidfile=./%MULE_APP%.pid
#wrapper.pidfile.strict=TRUE

# Do not edit lines below!

# This include should point to wrapper-additional.conf file in the same directory as this file
# ATTENTION: Path must be either absolute or relative to wrapper executable.
#include %MULE_BASE%/conf/wrapper-additional.conf
#include %MULE_BASE%/conf/wrapper-license.conf
